class t{constructor(){this.subscriptions={}}create(s=this.uid()){return s in this.subscriptions?console.warn(`A subscription has already been created for: ${s}`):this.subscriptions[s]={},s}subscribe(s,n){const r=this.uid();return this.subscriptions?.[s]||this.create(s),this.subscriptions[s][r]=n,r}unsubscribe(s,n=null){if(n===null)for(const r in this.subscriptions){for(const o in this.subscriptions[r])if(s===o){n=r;break}if(n!==null)break}delete this.subscriptions?.[n]?.[s]}publish(s,n){for(const r in this.subscriptions?.[s])this.subscriptions[s][r](n)}destroy(s){delete this.subscriptions?.[s]}uid(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}}const i=new t,b=i.create.bind(i),u=i.destroy.bind(i),e=i.publish.bind(i),c=i.publish.bind(i),h=i.subscribe.bind(i),l=i.unsubscribe.bind(i);export{i as EventBus,b as createSubscription,u as destroySubscription,e as post,c as publish,h as subscribe,l as unsubscribe};
