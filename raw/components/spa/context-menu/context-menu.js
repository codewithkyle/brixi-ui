import{html as r,render as o}from"./lit-html.js";import a from"./supercomponent.js";import i from"./env.js";import m from"./pos.js";i.css(["context-menu"]);class s extends a{constructor(e){super();this.handleItemClick=e=>{const t=e.currentTarget,n=parseInt(t.dataset.index);this.model.items?.[n]?.callback&&typeof this.model.items?.[n]?.callback=="function"&&this.model.items[n].callback()};this.model={items:[],x:0,y:0},this.set(e)}connected(){document.addEventListener("click",()=>{this.remove()},{passive:!0,capture:!0}),window.addEventListener("resize",()=>{this.remove()},{passive:!0,capture:!0}),window.addEventListener("scroll",()=>{this.remove()},{passive:!0,capture:!0}),this.addEventListener("click",e=>{e.stopImmediatePropagation()})}renderItem(e,t){return e===null?r`<hr />`:r`
            <button sfx="button" type="button" @click=${this.handleItemClick} data-index="${t}">
                <span>${e.label}</span>
                ${e.hotkey?r`<span class="font-grey-400">${e.hotkey}</span>`:""}
            </button>
        `}render(){this.isConnected||document.body.appendChild(this);const e=r` ${this.model.items?.map((t,n)=>this.renderItem(t,n))} `;o(e,this),m.positionElement(this,this.model.x,this.model.y)}}i.bind("context-menu",s);export{s as default};
