var r=Object.defineProperty;var s=(i,e,t)=>e in i?r(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var n=(i,e,t)=>(s(i,typeof e!="symbol"?e+"":e,t),t);class h extends HTMLElement{constructor(){super();n(this,"onBlur",()=>{if(this.inputEl!=null){if(this.inputEl.required&&this.inputEl.value.trim().length==0){this.renderError("This field is required.");return}else if(this.inputEl?.minLength!==-1&&this.inputEl.value.length<this.inputEl.minLength){this.renderError(`This field must be at least ${this.inputEl.minLength} characters.`);return}else if(this.inputEl.maxLength!==-1&&this.inputEl.value.length>this.inputEl.maxLength){this.renderError(`This field must be less than ${this.inputEl.maxLength} characters.`);return}this.clearError()}});n(this,"onInput",()=>{this.clearError()})}connectedCallback(){if(this.inputEl=this.querySelector("input"),this.descEl=this.querySelector("p"),this.descEl==null){this.descEl=document.createElement("p");const t=this.querySelector("input-container");this.insertBefore(this.descEl,t)}this.instructions=this.descEl?.innerHTML??"",this.inputEl?.addEventListener("blur",this.onBlur.bind(this)),this.inputEl?.addEventListener("input",this.onInput.bind(this))}renderError(t){this.inputEl!=null&&(this.setAttribute("state","ERROR"),this.descEl.innerHTML=t)}clearError(){this.inputEl==null||this.inputEl.getAttribute("state")==="IDLING"||(this.setAttribute("state","IDLING"),this.descEl!=null&&(this.descEl.innerHTML=this.instructions))}}export{h as InputComponent};
