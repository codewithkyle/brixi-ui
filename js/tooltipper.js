class d{constructor(){this.clickTooltip=o=>{const t=o.target?.closest("[tooltip]");if(!(t instanceof HTMLElement)||t?.getAttribute("tooltip")===null||o instanceof KeyboardEvent&&o.key!==" ")return;t.dataset.tooltipUid||(t.dataset.tooltipUid=r());const e=document.body.querySelector(`tool-tip[uid="${t.dataset.tooltipUid}"]`);e&&e?.remove()},this.showTooltip=o=>{const t=o.target;if(!(t instanceof HTMLElement)||t?.getAttribute("tooltip")===null||o instanceof TouchEvent||o instanceof FocusEvent&&this.deviceType!==1)return;let e=t.getAttribute("tooltip");if(e.length||(e=t.getAttribute("aria-label")),e.length||(e=t.getAttribute("title")),!e.length){console.warn("Tooltip could not be created -- missing aria-label, tooltip, or title attribute.");return}t.dataset.tooltipUid||(t.dataset.tooltipUid=r());let i=document.body.querySelector("tool-tip")||document.createElement("tool-tip");i.setAttribute("uid",t.dataset.tooltipUid),i.innerHTML=e,i.setAttribute("role","tooltip"),i.style.position="absolute",i.style.zIndex="999999",i.style.opacity="0",i.isConnected||document.body.appendChild(i),this.placeTooltip(t,i),i.classList.add("visible"),i.style.opacity="1",t.dataset.tooltipUid in this.trackedElements||(this.observer.observe(t,{attributes:!0}),this.trackedElements[t.dataset.tooltipUid]=null)},this.hideTooltip=o=>{const t=o.target;if(!(t instanceof HTMLElement)||t?.getAttribute("tooltip")===null||!t?.dataset?.tooltipUid)return;const e=document.body.querySelector(`tool-tip[uid="${t.dataset.tooltipUid}"]`);e&&e?.remove()},this.trackedElements={},this.deviceType=1,document.addEventListener("mouseenter",this.showTooltip,{capture:!0,passive:!0}),document.addEventListener("focus",this.showTooltip,{capture:!0,passive:!0}),document.addEventListener("mouseleave",this.hideTooltip,{capture:!0,passive:!0}),document.addEventListener("blur",this.hideTooltip,{capture:!0,passive:!0}),document.addEventListener("click",this.clickTooltip,{capture:!0,passive:!0}),document.addEventListener("keypress",this.clickTooltip,{capture:!0,passive:!0}),document.addEventListener("touchstart",()=>{this.deviceType=2},{capture:!0,passive:!0}),document.addEventListener("mousemove",()=>{this.deviceType=1},{capture:!0,passive:!0}),this.observer=new MutationObserver(o=>{o.forEach(t=>{if(t.type==="attributes"&&(t.attributeName==="tooltip"||t.attributeName==="aria-label")){const e=t.target;let i=e.getAttribute("tooltip");i.length||(i=e.getAttribute("aria-label")),i.length||(i=e.getAttribute("title"));const l=document.body.querySelector(`tool-tip[uid="${e.dataset.tooltipUid}"]`);l&&(l.innerHTML=i,this.placeTooltip(e,l))}})})}placeTooltip(o,t){const e=o.getBoundingClientRect(),i=t.getBoundingClientRect();let l=e.left+e.width/2-i.width/2;l+i.width>window.innerWidth-4?l-=l+i.width-window.innerWidth+4:l<4&&(l=4);let s=e.top+e.height-window.scrollY;s+i.height>window.innerHeight-4?s=e.top-i.height:s+i.height>window.scrollY&&(s=e.top+e.height+window.scrollY),t.style.top=`${s}px`,t.style.left=`${l}px`}}function r(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,n=>(n^crypto.getRandomValues(new Uint8Array(1))[0]&15>>n/4).toString(16))}const a=new d;var p=a;export{p as default};
