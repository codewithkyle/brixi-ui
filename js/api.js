class d{constructor(){this.defaultHeaders={},this.defaultBody={},this.defaultParams={},this.setURL(location.origin)}setURL(e){this.url=e.replace(/\/$/,"").trim()}setHeaders(e){this.defaultHeaders=e}setBody(e){this.defaultBody=e}setGetParams(e){this.defaultParams=e}async fetch(e){let a={title:null,message:null,status:200,code:"0x000",data:null,success:!0};try{e?.origin?e.origin=e.origin.replace(/\/$/,"").trim():e.origin=this.url;let s=`${e.origin}/${e.route.replace(/.*?\//,"").replace(/\?.*/,"").trim()}`;s=this.attachGetParams(s,e);const r=this.buildRequestOptions(e),i=this.buildBody(e);i!==null&&(r.body=i);const o=await fetch(s,r);let t;switch(e?.output){case"Blob":t=await o.blob(),t=URL.createObjectURL(t);break;case"Text":t=await o.text();break;default:t=await o.json();break}o.ok?(a.success=!0,typeof t=="object"?a=t:a.data=t):(t?.title&&t?.message?a=t:(a.title="Server Error",a.message=`A ${o.status} error occurred.`),a.success=!1)}catch(s){console.error(s),a.success=!1,a.title="Network Error",a.message="Failed to connect with the API. Check your network connection and try again.",a.status=418,a.code="1x418"}return a}buildBody(e){return e?.body?typeof e.body=="object"?e.body=Object.assign(this.defaultBody,e.body):(e.body=this.defaultBody,console.warn("Invalid request body. Body must be an object.")):e.body=this.defaultBody,Object.keys(e.body).length?JSON.stringify(e.body):null}buildRequestOptions(e){return e?.headers?typeof e.headers=="object"?e.headers=Object.assign(this.defaultHeaders,e.headers):(e.headers=this.defaultHeaders,console.warn("Invalid request headers. Headers must be an object.")):e.headers=this.defaultHeaders,{method:e?.method??"GET",headers:new Headers(e.headers)}}attachGetParams(e,a){a?.params?typeof a.params=="object"?a.params=Object.assign(this.defaultParams,a.params):(a.params=this.defaultParams,console.warn("Invalid request params. Params must be an object.")):a.params=this.defaultParams,e+="?";for(const s in a.params){const r=a.params[s];if(Array.isArray(r))for(let i=0;i<r.length;i++)e+=`${s}=${r[i]}&`;else e+=`${s}=${a.params[s]}&`}return e.replace(/\&$/,"").trim()}}const n=new d;var c=n;export{c as default};
