import{debounce as r}from"./general.js";class h extends HTMLElement{constructor(){super();this.initDrag=t=>{let e;t instanceof MouseEvent?e=t.clientX:t instanceof TouchEvent&&(e=t.touches[0].clientX),this.x=e,this.dragging=!0,this.setAttribute("dragging","true")};this.doDrag=t=>{let e;if(t instanceof MouseEvent?e=t.clientX:t instanceof TouchEvent&&(e=t.touches[0].clientX),this.dragging){const n=e,s=n-this.x;let i=this.width+s;i>this.maxWidth?i=this.maxWidth:i<300&&(i=300),this.container.style.width=`${i}px`,this.width=i,this.x=n}};this.stopDrag=t=>{this.dragging=!1,this.setAttribute("dragging","false")};this.resize=()=>{this.maxWidth=this.getBoundingClientRect().width,this.container.style.width=`${this.maxWidth}px`,this.width=this.maxWidth};this._resizeElement=this.querySelector("resize-bar"),this.dragging=!1}connectedCallback(){this.container=this.querySelector("resize-container"),this.width=this.getBoundingClientRect().width,this.maxWidth=this.width,this._resizeElement.addEventListener("mousedown",this.initDrag),document.addEventListener("mousemove",this.doDrag),document.addEventListener("mouseup",this.stopDrag),this._resizeElement.addEventListener("touchstart",this.initDrag),document.addEventListener("touchmove",this.doDrag),document.addEventListener("touchend",this.stopDrag),window.addEventListener("resize",r(this.resize.bind(this),300))}}export{h as default};
